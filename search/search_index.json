{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#what-is-route53-dynamic-dns","title":"What is route53-dynamic-dns?","text":"<p>A lightweight cli application written in Node that will update an Amazon Route53 hosted zone with your current public IP address on a scheduled interval.  This project is a no cost alternative to DynamicDNS services such as Dyn, No-IP, etc.  Designed to be simple and efficient and run via a docker container or node.js process.</p>"},{"location":"#license","title":"License","text":""},{"location":"#mit","title":"MIT","text":"<p>Route53 Dynamic DNS is licensed under the MIT License.  A copy of MIT License is included in this repository.</p>"},{"location":"#attribution","title":"Attribution","text":"<p>The following 3rd-party software components may be used by or distributed with route53-dynamic-dns</p> <p></p>"},{"location":"contributing/","title":"Contributing","text":"<p>I'm excited that you want to contribute!  Your ongoing support will continue to make this project great.</p>"},{"location":"contributing/#submitting-a-pull-request","title":"Submitting a Pull Request","text":"<ul> <li>Fork and clone the repository</li> <li>Configure and install the dependencies</li> <li>Create a new branch</li> <li>Make your changes</li> <li>Test your code</li> <li>Push to your fork and submit a pull request</li> </ul>"},{"location":"contributing/#best-practices","title":"Best practices","text":"<ul> <li>Keep your changes as focused as possible</li> <li>Update <code>README.MD</code> and any other docs</li> <li>Write a good message</li> </ul>"},{"location":"faq/","title":"FAQ","text":""},{"location":"faq/#im-using-opendns-and-started-getting-an-error","title":"I'm using <code>opendns</code> and started getting an error","text":"<p>In October 2021, users started experiencing connection issues to openDNS.  It appears the server for diagnostic.opendns.com is configured incorrectly and the server's certificate chain is incomplete.  This is causing a verification error.  Rather than try and download the missing cert in the code I decided it's better to change the default to ifconfig.co and point opendns to ipify.org in the code to support backwards compatibility.  This change was made and released as version 1.2.1 in November 2021.  It will remain in effect until openDNS resolves their issue.  More information is available in this reported issue</p>"},{"location":"faq/#i-keep-getting-an-error-and-the-process-wont-run","title":"I keep getting an error and the process won't run","text":"<p>Check to make sure all variables are set properly in <code>.env</code> or passed properly into the Docker Container at runtime.  Review the documentation on Environment Variables and Docker Usage</p>"},{"location":"issues/","title":"Reporting an Issue","text":""},{"location":"issues/#before-submitting-an-issue","title":"Before Submitting an Issue","text":"<p>Please follow GitHub Etiquette</p> <p>Please do a search in open issues to see if the issue or feature request has already been filed.</p> <p>If you find your issue already exists, make relevant comments and add your reaction.</p>"},{"location":"issues/#submitting-an-issue","title":"Submitting an Issue","text":"<p>Read FAQ and check to make sure all variables are set properly in <code>.env</code> or passed properly into the Docker Container at runtime.  If you are sure your environment variables are correct, please open an issue and provide as much detail as possible.</p>"},{"location":"config/aws/","title":"AWS Services","text":""},{"location":"config/aws/#minimum-aws-iam-policy","title":"Minimum AWS IAM Policy","text":"<p>Below are examples of minimium IAM policies for Route53 and SES</p>"},{"location":"config/aws/#route53","title":"Route53","text":"<pre><code>{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n        {\n            \"Sid\": \"route53policy1\",\n            \"Effect\": \"Allow\",\n            \"Action\": \"route53:ChangeResourceRecordSets\",\n            \"Resource\": \"arn:aws:route53:::hostedzone/*\"\n        },\n        {\n            \"Sid\": \"route53policy2\",\n            \"Effect\": \"Allow\",\n            \"Action\": \"route53:TestDNSAnswer\",\n            \"Resource\": \"*\"\n        }\n    ]\n}\n</code></pre>"},{"location":"config/aws/#ses","title":"SES","text":"<pre><code>{\n    \"Effect\": \"Allow\",\n    \"Action\": \"ses:SendEmail\",\n    \"Resource\": \"*\",\n    \"Condition\": {\n        \"ForAllValues:StringLike\": {\n            \"ses:Recipients\": [\n                \"you@example.org\"\n            ]\n        }\n    }\n}\n</code></pre>"},{"location":"config/env/","title":"Environment Variables","text":"<p>Environment variables are required to run the process.</p> <pre><code>-----------------------------------------------------------------------\nVARIABLE                TYPE        COMMENTS\n-----------------------------------------------------------------------\nAWS_ACCESS_KEY_ID       string      AWS Access Key for IAM user\nAWS_SECRET_ACCESS_KEY   string      AWS Secret Access Key for IAM user\nAWS_REGION              string      AWS Region; ex: \"us-east-1\"\nROUTE53_HOSTED_ZONE_ID  string      AWS Route53 Hosted Zone ID; ex: \"Z25S75OFY0ERQD\"\nROUTE53_DOMAIN          string      AWS Route53 FQDN; ex: \"home.example.com\"\nROUTE53_TYPE            string      AWS Route 53 record type for FQDN; ex: \"A\"\nROUTE53_TTL             integer     AWS Route 53 TTL in seconds for FQDN; ex: 60\nSEND_EMAIL_SES          boolean     Case sensative, default: `false` - use AWS SES to send notification email. ex: true\nSES_TO_ADDRESS          string      If SEND_EMAIL_SES = true then required, 'To' address for email; ex: \"admin@example.com\"\nSES_FROM_ADDRESS        string      If SEND_EMAIL_SES = true then `required`, 'To' address for email; ex: \"admin@example.com\"\nUPDATE_FREQUENCY        integer     default: `60000 (1m)` - Interval in Milliseconds to check if Public IP has changed; ex: 60000 (which is every minute)\nIPCHECKER               string      default: `ifconfig.co` - Public IP checker service. 'ifconfig.co' or 'ipify.org'.  See note below for 'opendns'\nLOG_TO_STDOUT           boolean     Case sensative, default: `false` - Flag to set log to STDOUT rather than to the application log file.\n</code></pre> <p>For help setting up IAM user access see AWS Javascript SDK - Getting Started.</p> <p>As of November 2021, 'opendns' option is not working because the server's certificate chain is incomplete.  The latest release temporarily points 'opendns' option to 'ipify.org'.  This change will be removed after server config is fixed.  More info in this issue.</p>"},{"location":"config/env/#minimium-env-variables","title":"Minimium ENV Variables","text":"<p>Run with default values</p> <pre><code>AWS_ACCESS_KEY_ID=[SECRET]\nAWS_SECRET_ACCESS_KEY=[SECRET]\nAWS_REGION=[REGION]\nROUTE53_HOSTED_ZONE_ID=[value]\nROUTE53_DOMAIN=[value]\nROUTE53_TYPE=[value]\nROUTE53_TTL=[value]\n</code></pre>"},{"location":"config/env/#enable-ses-emails","title":"Enable SES Emails","text":"<p>Run with SES Emails.  Make sure IAM policy exists to use SES services.  See AWS Services</p> <pre><code>AWS_ACCESS_KEY_ID=[SECRET]\nAWS_SECRET_ACCESS_KEY=[SECRET]\nAWS_REGION=[REGION]\nROUTE53_HOSTED_ZONE_ID=[value]\nROUTE53_DOMAIN=[value]\nROUTE53_TYPE=[value]\nROUTE53_TTL=[value]\nSEND_EMAIL_SES=true\nSES_TO_ADDRESS=[value]\nSES_FROM_ADDRESS=[value]\n</code></pre>"},{"location":"config/env/#full-configuration","title":"Full Configuration","text":"<p>Run with all options (<code>LOG_TO_STDOUT=true</code> is recommended setting in container)</p> <pre><code>AWS_ACCESS_KEY_ID=[SECRET]\nAWS_SECRET_ACCESS_KEY=[SECRET]\nAWS_REGION=[REGION]\nROUTE53_HOSTED_ZONE_ID=[value]\nROUTE53_DOMAIN=[value]\nROUTE53_TYPE=[value]\nROUTE53_TTL=[value]\nSEND_EMAIL_SES=[true or false]\nSES_TO_ADDRESS=[if SEND_EMAIL_SES = true then value else empty]\nSES_FROM_ADDRESS=[if SEND_EMAIL_SES = true then value else empty]\nUPDATE_FREQUENCY=60000\nIPCHECKER=ifconfig.co\nLOG_TO_STDOUT=false\n</code></pre>"},{"location":"install/docker/","title":"Docker","text":"<p>Image is built from official <code>node:alpine</code> image, which runs on the popular Alpine Linux project. Alpine Linux is much smaller than most distribution base images (~5MB), which leads to much slimmer images in general.  If you are not familiar with Docker, please start by reading Getting Started section of Official Docker Documentation.</p>"},{"location":"install/docker/#versions","title":"Versions","text":""},{"location":"install/docker/#route53-dynamic-dnslatest","title":"<code>route53-dynamic-dns:latest</code>","text":"<p>Points to <code>latest</code> stable version.  Every attempt is made to keep releases backwards compatible.  Project follows Semantic Versioning.  You can expect breaking changes may exist in MAJOR versions (1.X.X -&gt; 2.X.X), but they should not exist in MINOR and PATCH versions.  Since project inception there has not been a release that is not backwards compatible.  The code base is stable.  There is no expectation of issues with backwards compatibility in future versions, but everyone should be aware of how versions are managed.  For most people looking to be hands off on upgrades, it should be safe to use <code>latest</code> version.  If your primary concern is stability, it is recommended that you use a specific version (see below).</p>"},{"location":"install/docker/#route53-dynamic-dnsv121","title":"<code>route53-dynamic-dns:v1.2.1</code>","text":"<p>Stable version built from tag <code>v1.2.1</code>.  The code is also available as GitHub Release with tag <code>v1.2.1</code>.</p>"},{"location":"install/docker/#route53-dynamic-dnsdev","title":"<code>route53-dynamic-dns:dev</code>","text":"<p>Automated build triggers with every <code>git push</code> to <code>master</code> branch.  This version is not guarenteed to be stable.  If you are looking for a stable version, please use <code>route53-dynamic-dns:v1.2.1</code> or <code>route53-dynamic-dns:latest</code>.</p>"},{"location":"install/docker/#pull-image","title":"Pull Image","text":"<p>Pull image from DockerHub.  Replace <code>[version]</code> with desired version (ex: <code>v1.2.1</code>).</p> <pre><code>$ docker pull sjmayotte/route53-dynamic-dns:[verison]\n</code></pre>"},{"location":"install/node/","title":"Node.js Process","text":"<p>Steps below assume you have Node.js and NPM installed on machine.  If you do not, please download and install Node.js and NPM before proceeding.</p>"},{"location":"install/node/#download-release","title":"Download Release","text":"<p>Download release <code>version</code> from release repository.  For example, you can use <code>v1.2.1.tar.gz</code> to download source for release tag <code>v1.2.1</code>.</p> <pre><code>$ curl -sL https://github.com/sjmayotte/route53-dynamic-dns/archive/[version] | tar xz\n$ cd route53-dynamic-dns\n</code></pre>"},{"location":"install/node/#set-environment-variables","title":"Set Environment Variables","text":"<p>You have the option to pass environment variables at runtime or populate environment variables in <code>.env</code>.  Release package includes <code>.env.example</code>, which can be renamed to <code>.env</code> and populated with values.  The process expects <code>.env</code> will be in root of directory structure.</p> <pre><code>$ cp .env.example .env\n$ vi .env\n$ # Update .env with values and save file\n$ rm .env.example\n</code></pre> <p>See Minimium ENV Variables for example of minimium configuration.</p>"},{"location":"install/node/#installation","title":"Installation","text":"<p>Project uses NPM package manager.  Install dependencies from <code>package.json</code>.</p> <pre><code>$ npm install\n</code></pre>"},{"location":"usage/docker/","title":"Docker","text":""},{"location":"usage/docker/#run-container-examples","title":"Run Container Examples","text":"<p>See Docker Run Reference for full list of options.</p>"},{"location":"usage/docker/#minimium-env-variables","title":"Minimium ENV Variables","text":"<p>Run container with default values (see: Environment Variables)</p> <pre><code>$ docker run -d -t -i --rm \\\n    --name route53-dynamic-dns \\\n    -e AWS_ACCESS_KEY_ID=[SECRET] \\\n    -e AWS_SECRET_ACCESS_KEY=[SECRET] \\\n    -e AWS_REGION=[REGION] \\\n    -e ROUTE53_HOSTED_ZONE_ID=[value] \\\n    -e ROUTE53_DOMAIN=[value] \\\n    -e ROUTE53_TYPE=[value] \\\n    -e ROUTE53_TTL=[value] \\\n    sjmayotte/route53-dynamic-dns:[verison]\n</code></pre>"},{"location":"usage/docker/#enable-ses-emails","title":"Enable SES Emails","text":"<p>Run container with SES Emails  (see: Environment Variables)</p> <pre><code>$ docker run -d -t -i --rm \\\n    --name route53-dynamic-dns \\\n    -e AWS_ACCESS_KEY_ID=[SECRET] \\\n    -e AWS_SECRET_ACCESS_KEY=[SECRET] \\\n    -e AWS_REGION=[REGION] \\\n    -e ROUTE53_HOSTED_ZONE_ID=[value] \\\n    -e ROUTE53_DOMAIN=[value] \\\n    -e ROUTE53_TYPE=[value] \\\n    -e ROUTE53_TTL=[value] \\\n    -e SEND_EMAIL_SES=true \\\n    -e SES_TO_ADDRESS=[value] \\\n    -e SES_FROM_ADDRESS=[value] \\\n    sjmayotte/route53-dynamic-dns:[verison]\n</code></pre>"},{"location":"usage/docker/#full-configuration","title":"Full Configuration","text":"<p>Run container with all options (see: Environment Variables).  <code>LOG_TO_STDOUT=true</code> is recommended setting in container.</p> <pre><code>$ docker run -d -t -i --rm \\\n    --name route53-dynamic-dns \\\n    -e AWS_ACCESS_KEY_ID=[SECRET] \\\n    -e AWS_SECRET_ACCESS_KEY=[SECRET] \\\n    -e AWS_REGION=[REGION] \\\n    -e ROUTE53_HOSTED_ZONE_ID=[value] \\\n    -e ROUTE53_DOMAIN=[value] \\\n    -e ROUTE53_TYPE=[value] \\\n    -e ROUTE53_TTL=[value] \\\n    -e SEND_EMAIL_SES=[true or false] \\\n    -e SES_TO_ADDRESS=[if SEND_EMAIL_SES = true then value else empty] \\\n    -e SES_FROM_ADDRESS=[if SEND_EMAIL_SES = true then value else empty] \\\n    -e UPDATE_FREQUENCY=60000 \\\n    -e IPCHECKER=ifconfig.co \\\n    -e LOG_TO_STDOUT=true \\\n    sjmayotte/route53-dynamic-dns:[verison]\n</code></pre>"},{"location":"usage/docker/#view-useful-container-data","title":"View Useful Container Data","text":"<p>Determine <code>CONTAINER ID</code> for container started in previous step.</p> <pre><code>$ docker ps -a\n</code></pre> <p>Sample output</p> <pre><code>CONTAINER ID    IMAGE                           COMMAND        CREATED            STATUS            PORTS       NAMES\n9998c92ff8a1    sjmayotte/route53-dynamic-dns   \"npm start\"    45 seconds ago     Up 44 seconds                 route53-dynamic-dns\n</code></pre> <p>View logs of <code>STDOUT</code> from <code>CONTAINER ID</code> (copy from output above)</p> <pre><code>$ docker logs [CONTAINER ID]\n</code></pre> <p>View Node.js process log, which is written to <code>application.log</code> in project root directory.  See: Logs for more details.</p> <pre><code>$ docker exec -it [CONTAINER ID] sh\n/usr/src/app &gt; ls -la\n/usr/src/app &gt; tail -f application.log\n</code></pre> <p>If running container with <code>LOG_TO_STDOUT=true</code> you will see logs in STDOUT.</p>"},{"location":"usage/logs/","title":"Logs","text":""},{"location":"usage/logs/#stdout","title":"<code>STDOUT</code>","text":"<p>When Node.js process starts it writes useful data to <code>STDOUT</code>.  Example output:</p> <pre><code>Log4js initialized with level INFO \n\nLogs located in application.log in working directory\n\nIf running in Docker Container use the following command to access a shell:\n   docker exec -it [container_id] sh\n</code></pre> <p>If you set ENV variable <code>LOG_TO_STDOUT=true</code> then logs will send to STDOUT.</p>"},{"location":"usage/logs/#applicationlog","title":"<code>application.log</code>","text":"<p>Application logs are written to <code>application.log</code> in root project directory.  Log files are compressed and archived after reaching 10MB in size.  The most recent 3 archives are kept in rotation.  All other archives are deleted to keep footprint small.  This is ignored if <code>LOG_TO_STDOUT=true</code>.</p>"},{"location":"usage/node/","title":"Node.js Process","text":""},{"location":"usage/node/#run-process","title":"Run Process","text":"<p>Start Node.js process which will run forever (or until process is stopped by user).</p> <pre><code>$ npm start\n</code></pre> <p>The Node.js process writes useful data to log files.  See Logs section for more information.</p>"}]}